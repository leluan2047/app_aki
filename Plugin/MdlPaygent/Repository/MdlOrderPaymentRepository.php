<?php
/*
 * Copyright(c) 2016 MDL Paygent, Inc. All rights reserved.
 * http://www.paygent.co.jp/
 */

namespace Plugin\MdlPaygent\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * OrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MdlOrderPaymentRepository extends EntityRepository
{
    /** @var array */
    public $config;

    public function setConfig(array $config)
    {
        $this->config = $config;
    }


    public function getOrderSummary($customerId, $status)
    {
    	$qb = $this->getEntityManager()->createQueryBuilder();
    	$qb
    	->select('SUM(o.payment_total) AS buy_total,
		            COUNT(o.id) AS buy_times,
		            MAX(o.create_date) AS last_buy_date,
		            MIN(o.create_date) AS first_buy_date')
        			->from('\Eccube\Entity\Order', 'o')
        			->where($qb->expr()->andx(
        					$qb->expr()->eq('o.Customer', ':customer'),
        					$qb->expr()->neq('o.OrderStatus', ':orderStatus'))
        					);
        			$qb->setParameter('customer', $customerId);
        			$qb->setParameter('orderStatus', $status);

        	return $ret = $qb->getQuery()->getResult();
    }

    public function getDeliveryTime($orderId, $customerId, $timeId = "")
    {
    	$qb = $this->getEntityManager()->createQueryBuilder();
    	$qb
    	->select('a.delivery_time')
    		            ->from('\Eccube\Entity\DeliveryTime', 'a')
    		            ->innerJoin('\Eccube\Entity\Shipping', 'b', 'WITH', 'a.Delivery = b.Delivery')
    		            ->innerJoin('\Eccube\Entity\Order', 'c', 'WITH', 'b.Order = c.id')
    		            ->where($qb->expr()->andx(
    		            		$qb->expr()->eq('c.Customer', ':customerId'),
    		            		$qb->expr()->eq('c.id', ':orderId')
    		            		));
    		            $qb->setParameter('customerId', $customerId);
    		            $qb->setParameter('orderId', $orderId);

    		            if (is_null($timeId)) {
    		            	$qb->andWhere(
    		            			$qb->expr()->isNull('a.time_id'));
    		            } else {
    		            	$qb->andWhere(
    		            			$qb->expr()->eq('a.id', ':time_id'));
    		            	$qb->setParameter('time_id', $timeId);
    		            }
    	return $ret = $qb->getQuery()->getResult();
    }

    /**
     * Find or create payment method
     *
     * @param type $id
     * @return type
     */
    public function findOrCreate($id)
    {
    	if ($id == 0) {
    		$Order = new \Plugin\MdlPaygent\Entity\MdlOrderPayment();
    	} else {
    		$Order = $this->find($id);
    	}

    	return $Order;
    }

    //Quinv_get order by order id in table:mdl_order_payment
    function getOrderByIdMethod($orderId)
    {
    	$qb = $this->getEntityManager()->createQueryBuilder();
    	$qb
    	->select('g')
    	->from('\Eccube\Entity\Order', 'p')
    	->innerJoin('\Plugin\MdlPaygent\Entity\MdlOrderPayment', 'g', 'WITH', 'p.id = g.id')
    	->where(
    			$qb->expr()->eq('p.del_flg', 0),
    			$qb->expr()->eq('g.id', ':id')
    			);
    	$qb->setParameter('id', $orderId);
    	$ret = $qb
    	->getQuery()
    	->getResult();
    	return $ret;
    }
    
    function getOrderByOrderId($orderId)
    {
    	$qb = $this->getEntityManager()->createQueryBuilder();
    	$qb
    	->select('p')
    	->from('\Eccube\Entity\Order', 'p')
    	->where(
    			$qb->expr()->eq('p.del_flg', 0),
    			$qb->expr()->eq('p.id', ':id')
    			);
    	$qb->setParameter('id', $orderId);
    	$ret = $qb
    	->getQuery()
    	->getResult();
    	return $ret;
    }
    

    function getShippingByOrderId($orderId)
    {
    	$qb = $this->getEntityManager()->createQueryBuilder();
    	$qb
    	->select('p')
    	->from('\Eccube\Entity\Shipping', 'p')
    	->where(
    			$qb->expr()->eq('p.del_flg', 0),
    			$qb->expr()->eq('p.Order', ':id')
    			);
    	$qb->setParameter('id', $orderId);
    	$qb->orderBy('p.id','ASC');
    	$ret = $qb
    	->getQuery()
    	->getArrayResult();

    	return $ret;
    }

    function getPrefByShippingId($shippingId)
    {
    	$qb = $this->getEntityManager()->createQueryBuilder();
    	$qb
    	->select('g.name as shipping_pref')
    	->from('\Eccube\Entity\Shipping', 'p')
    	->innerJoin('\Eccube\Entity\Master\Pref', 'g', 'WITH', 'p.Pref = g.id')
    	->where(
    			$qb->expr()->eq('p.del_flg', 0),
    			$qb->expr()->eq('p.id', ':id')
    			);
    	$qb->setParameter('id', $shippingId);
    	$ret = $qb
    	->getQuery()
    	->getArrayResult();

    	return $ret;
    }

    /**
     *
     */
    public function getEnableStatus()
    {
            $qb = $this->getEntityManager()->createQueryBuilder();
            $qb
            ->select('T1')
            ->from('\Eccube\Entity\Product', 'T1')
            ->innerJoin('\Eccube\Entity\ProductClass', 'T2', 'WITH', 'T1.id = T2.Product')
            ->where($qb->expr()->andx(
            		$qb->expr()->eq('T1.del_flg', 0),
            		$qb->expr()->eq('T1.Status', 1)
            		));
            $ret = $qb
            ->getQuery()
            ->getArrayResult();

            return $ret;
    }
    /**
     * 受注詳細を取得する.
     *
     * @param  integer $order_id         受注ID
     * @param  boolean $has_order_status 対応状況, 入金日も含める場合 true
     * @return array   受注詳細の配列
     */
    public function getOrderDetail($order_id, $has_order_status = true)
    {
    	$col = <<< __EOS__
    	    T5.id as product_id,
    	    T3.id as product_class_id,
			T6.id as product_type_id,
            T2.product_code,
            T2.product_name,
            T2.class_category_name1 AS classcategory_name1,
            T2.class_category_name2 AS classcategory_name2,
            T2.price,
            T2.quantity,
            T2.tax_rate,
            T2.tax_rule
__EOS__;
    	if ($has_order_status) {
    		$col .= ',T4.id, T1.payment_date AS payment_date';
    	}

    	$qb = $this->getEntityManager()->createQueryBuilder();
    		$qb->select($col)
    	    	->from('\Eccube\Entity\Order', 'T1')
    	    	->innerJoin('\Eccube\Entity\OrderDetail', 'T2', 'WITH', 'T1.id = T2.Order')
    	    	->leftJoin('\Eccube\Entity\ProductClass', 'T3', 'WITH', 'T2.ProductClass = T3.id')
    	    	->innerJoin('\Eccube\Entity\Master\OrderStatus', 'T4', 'WITH', 'T1.OrderStatus = T4.id')
    	    	->innerJoin('\Eccube\Entity\Product', 'T5', 'WITH', 'T3.Product = T5.id')
    	    	->innerJoin('\Eccube\Entity\Master\ProductType', 'T6', 'WITH', 'T3.ProductType = T6.id')
    	    	->where($qb->expr()->andx(
    	    			$qb->expr()->eq('T1.id', ':id')
    	    			));
    	    	$qb->setParameter('id', $order_id);
				$qb->orderBy('T2.id', 'ASC');
    	    	$ret = $qb
    	    	->getQuery()
    	    	->getResult();

    	    return $ret;
    }

    function getPref()
    {
    	$qb = $this->getEntityManager()->createQueryBuilder();
    	$qb
    	->select('p')
    	->from('\Eccube\Entity\Master\Pref', 'p');
    	$ret = $qb
    	->getQuery()
    	->getArrayResult();
    	return $ret;
    }

    function getShopInfo()
    {
    	$qb = $this->getEntityManager()->createQueryBuilder();
    	$qb
    	->select('p')
    	->from('\Eccube\Entity\BaseInfo', 'p');
    	$ret = $qb
    	->getQuery()
    	->getArrayResult();
    	return $ret;
    }

    public function getCountPaymentId($paymentId, $orderId)
    {
    	$qb = $this->getEntityManager()->createQueryBuilder();
    	$qb
    	->select('COUNT(p.memo06) AS cnt')
    	->from('\Eccube\Entity\Order', 'o')
    	->innerJoin('\Plugin\MdlPaygent\Entity\MdlOrderPayment', 'p', 'WITH', 'o.id = p.id')
    	->where($qb->expr()->andx(
    			$qb->expr()->eq('p.memo01', ':code'),
    			$qb->expr()->eq('p.memo06', ':paymentId'),
    			$qb->expr()->eq('o.id', ':id')
    			));
    	$qb->setParameter('code', $this->config['MDL_PAYGENT_CODE']);
    	$qb->setParameter('paymentId', $paymentId);
    	$qb->setParameter('id', $orderId);

    	$ret = $qb
    	->getQuery()
    	->getArrayResult();

    	return $ret;
    }

    public function getArrOrderDetail($order_id) {
    	$qb = $this->getEntityManager()->createQueryBuilder();
    	$qb
    	->select('p')
    	->from('\Eccube\Entity\OrderDetail', 'p')
    	->where($qb->expr()->andx(
    			$qb->expr()->eq('p.Order', ':id')
    			));
    	$qb->setParameter('id', $order_id);

    	$ret = $qb
    	->getQuery()
    	->getResult();

    	return $ret;
    }


    public function getMemo10ByPaymentMethod($paygentCode)
    {
    	$qb = $this->getEntityManager()->createQueryBuilder();
    	$qb
    	->select('MAX(p.memo10)')
    	->from('\Eccube\Entity\Order', 'o')
    	->innerJoin('\Plugin\MdlPaygent\Entity\MdlOrderPayment', 'p', 'WITH', 'o.id = p.id')
    	->where($qb->expr()->andx(
    			$qb->expr()->eq('p.memo01', ':memo01')
    			));
    	$qb->setParameter('memo01', $paygentCode);

    	return $qb->getQuery()->getResult();
    }

    // get status, memo07, memo09 for Paygent Batch
    public function getArrOrder($orderId)
    {
    	$qb = $this->getEntityManager()->createQueryBuilder();
    	$qb
    	->select('os.id AS status, p.memo07, p.memo09')
    	->from('\Eccube\Entity\Order', 'o')
    	->innerJoin('\Eccube\Entity\Master\OrderStatus', 'os', 'WITH', 'o.OrderStatus = os.id')
    	->innerJoin('\Plugin\MdlPaygent\Entity\MdlOrderPayment', 'p', 'WITH', 'o.id = p.id')
    	->where($qb->expr()->andx(
    			$qb->expr()->eq('o.id', ':id')
    			));
    	$qb->setParameter('id', $orderId);

    	$ret = $qb
    	->getQuery()
    	->getArrayResult();
    	return $ret;
    }

    // get a field for Paygent Batch
    public function getOneField($field, $orderId)
    {
    	$qb = $this->getEntityManager()->createQueryBuilder();
    	$qb
    	->select($field)
    	->from('\Eccube\Entity\Order', 'o')
    	->innerJoin('\Eccube\Entity\Master\OrderStatus', 'os', 'WITH', 'o.OrderStatus = os.id')
    	->innerJoin('\Plugin\MdlPaygent\Entity\MdlOrderPayment', 'p', 'WITH', 'o.id = p.id')
    	->where($qb->expr()->andx(
    			$qb->expr()->eq('o.id', ':id')
    			));
    	$qb->setParameter('id', $orderId);

    	$ret = $qb
    	->getQuery()
    	->getOneOrNullResult();
    	return $ret;
    }

    public function getMdlOrder($orderId)
    {
    	$qb = $this->getEntityManager()->createQueryBuilder();
    	$qb
    	->select('p')
    	->from('\Eccube\Entity\Order', 'o')
    	->innerJoin('\Plugin\MdlPaygent\Entity\MdlOrderPayment', 'p', 'WITH', 'o.id = p.id')
    	->where($qb->expr()->andx(
    			$qb->expr()->eq('o.id', ':id')
    			));
    	$qb->setParameter('id', $orderId);

    	$ret = $qb
    	->getQuery()
    	->getOneOrNullResult();
    	return $ret;
    }


    public function getMdlOrderAndOrder($orderId)
    {
    	$qb = $this->getEntityManager()->createQueryBuilder();
    	$qb
    	->select('p, o.payment_total')
    	->from('\Eccube\Entity\Order', 'o')
    	->innerJoin('\Plugin\MdlPaygent\Entity\MdlOrderPayment', 'p', 'WITH', 'o.id = p.id')
    	->where($qb->expr()->andx(
    			$qb->expr()->eq('o.id', ':id')
    			));
    	$qb->setParameter('id', $orderId);

    	$ret = $qb
    	->getQuery()
    	->getOneOrNullResult();
    	return $ret;
    }

    /**
     * 関数名：getOrderInfo
     * 処理内容：引数で指定されたパラメータから
     * 受注情報を取得します。
     *
     * @param $order_id
     * @param $payment_id
     * @param $payment_amount
     *
     * @return $arrOrder
     */
    function getOrderInfo($order_id) {
    	$qb = $this->getEntityManager()->createQueryBuilder();
    	$qb
    	->select('o.payment_total, p.memo06, p.memo08, p.memo09')
    	->from('\Eccube\Entity\Order', 'o')
    	->innerJoin('\Plugin\MdlPaygent\Entity\MdlOrderPayment', 'p', 'WITH', 'o.id = p.id')
    	->where($qb->expr()->andx(
    			$qb->expr()->eq('o.id', ':id')
    			));
    	$qb->setParameter('id', $order_id);

    	$ret = $qb
    	->getQuery()
    	->getArrayResult();
    	return $ret;
    }

    function sfCheckRevice($order_id) {
    	$qb = $this->getEntityManager()->createQueryBuilder();
    	$qb
    	->select('o.payment_total')
    	->from('\Eccube\Entity\Order', 'o')
    	->innerJoin('\Plugin\MdlPaygent\Entity\MdlOrderPayment', 'p', 'WITH', 'o.id = p.id')
    	->where($qb->expr()->andx(
    			$qb->expr()->eq('o.id', ':id')
    			));
    	$qb->setParameter('id', $order_id);

    	$ret = $qb
    	->getQuery()
    	->getArrayResult();
    	return $ret;
    }

    function getMemo02FromMdlOrderPayment($order_id)
    {
    	$qb = $this->getEntityManager()->createQueryBuilder();
    	$qb
    	->select('g.id as order_id, g.memo02 as memo02')
        			->from('\Plugin\MdlPaygent\Entity\MdlOrderPayment', 'g')
        			->where($qb->expr()->andx(
        					$qb->expr()->eq('g.id', ':id')
        					));
        			$qb->setParameter('id', $order_id);
        $ret = $qb->getQuery()->getResult();

        return $ret;
    }
}
